/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>LexicalAnalyzer.flex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\3\1\5\1\5\1\4\22\0\1\53\1\46\1\2"+
    "\5\0\1\43\1\40\1\50\1\0\1\41\1\47\1\50\1\51\12\1"+
    "\1\42\1\41\1\45\1\52\1\50\1\44\1\0\1\6\1\32\3\6"+
    "\1\34\2\6\1\33\6\6\1\36\3\6\1\35\6\6\4\0\1\37"+
    "\1\0\1\20\1\7\1\14\1\22\1\10\1\23\1\11\1\27\1\12"+
    "\2\6\1\21\1\6\1\13\1\15\1\25\1\6\1\26\1\16\1\17"+
    "\1\24\1\6\1\31\1\6\1\30\1\6\12\0\1\5\32\0\1\53"+
    "\u05bf\0\12\1\206\0\12\1\306\0\12\1\u019c\0\12\1\166\0\12\1"+
    "\166\0\12\1\166\0\12\1\166\0\12\1\166\0\12\1\166\0\12\1"+
    "\166\0\12\1\166\0\12\1\166\0\12\1\140\0\12\1\166\0\12\1"+
    "\106\0\12\1\u0116\0\12\1\106\0\12\1\u05e6\0\1\53\u015f\0\12\1"+
    "\46\0\12\1\u012c\0\12\1\200\0\12\1\246\0\12\1\6\0\12\1"+
    "\266\0\12\1\126\0\12\1\206\0\12\1\6\0\12\1\u03a6\0\13\53"+
    "\35\0\1\5\1\5\5\0\1\53\57\0\1\53\u0fa0\0\1\53\u761f\0"+
    "\12\1\u02a6\0\12\1\46\0\12\1\306\0\12\1\26\0\12\1\126\0"+
    "\12\1\u0196\0\12\1\u5316\0\12\1\u0586\0\12\1\u0bbc\0\12\1\200\0"+
    "\12\1\74\0\12\1\220\0\12\1\u0116\0\12\1\u01d6\0\12\1\u0176\0"+
    "\12\1\146\0\12\1\u0216\0\12\1\u5176\0\12\1\346\0\12\1\u6c74\0"+
    "\62\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\21\4\3\2\1\0\1\5"+
    "\2\0\3\4\1\6\16\4\2\0\1\7\15\4\1\0"+
    "\2\10\7\4\2\0\5\4\2\0\4\4\2\0\1\4"+
    "\2\0\1\6\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\204\0\u03c8"+
    "\0\u03f4\0\u0420\0\204\0\u03c8\0\u044c\0\u0478\0\u04a4\0\u04d0"+
    "\0\334\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\204\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8"+
    "\0\204\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c"+
    "\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec"+
    "\0\u0e18\0\u0e44\0\u0e70\0\204\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\4\1\6\1\7"+
    "\1\10\1\6\1\11\1\6\1\12\1\13\1\6\1\14"+
    "\1\6\1\15\1\6\1\16\1\6\1\17\1\20\2\6"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\0\2\27"+
    "\1\30\1\31\3\0\1\32\1\33\1\34\1\0\1\4"+
    "\1\0\1\2\52\0\3\35\3\0\46\35\57\0\1\4"+
    "\56\0\31\6\23\0\2\6\1\36\26\6\23\0\5\6"+
    "\1\37\5\6\1\40\15\6\23\0\10\6\1\41\4\6"+
    "\1\41\13\6\23\0\7\6\1\42\21\6\23\0\16\6"+
    "\1\43\12\6\23\0\21\6\1\44\1\45\6\6\23\0"+
    "\7\6\1\46\21\6\23\0\16\6\1\47\12\6\23\0"+
    "\20\6\1\50\10\6\23\0\2\6\1\51\26\6\23\0"+
    "\21\6\1\52\7\6\23\0\7\6\1\53\21\6\23\0"+
    "\5\6\1\54\23\6\23\0\12\6\1\55\16\6\23\0"+
    "\20\6\1\56\10\6\23\0\16\6\1\57\12\6\67\0"+
    "\1\33\45\0\1\60\56\0\1\61\4\0\2\35\1\62"+
    "\51\35\6\0\3\6\1\63\25\6\23\0\14\6\1\41"+
    "\14\6\23\0\10\6\1\64\20\6\23\0\5\6\1\65"+
    "\23\6\23\0\11\6\1\41\17\6\23\0\2\6\1\66"+
    "\26\6\23\0\17\6\1\64\11\6\23\0\7\6\1\67"+
    "\21\6\23\0\5\6\1\70\23\6\23\0\7\6\1\71"+
    "\21\6\23\0\6\6\1\72\2\6\1\73\17\6\23\0"+
    "\4\6\1\74\24\6\23\0\7\6\1\75\21\6\23\0"+
    "\11\6\1\76\17\6\23\0\13\6\1\40\15\6\23\0"+
    "\16\6\1\64\12\6\23\0\11\6\1\77\17\6\62\0"+
    "\1\100\6\0\3\61\1\101\1\102\1\0\46\61\6\0"+
    "\4\6\1\66\24\6\23\0\2\6\1\41\26\6\23\0"+
    "\10\6\1\103\20\6\23\0\5\6\1\41\23\6\23\0"+
    "\17\6\1\41\11\6\23\0\6\6\1\104\22\6\23\0"+
    "\6\6\1\105\22\6\23\0\7\6\1\106\21\6\23\0"+
    "\16\6\1\107\12\6\23\0\13\6\1\64\15\6\23\0"+
    "\13\6\1\110\15\6\23\0\2\6\1\111\26\6\23\0"+
    "\31\6\1\112\62\0\1\113\10\0\1\101\56\0\11\6"+
    "\1\114\17\6\23\0\11\6\1\115\17\6\23\0\2\6"+
    "\1\116\26\6\23\0\20\6\1\37\10\6\23\0\20\6"+
    "\1\66\10\6\23\0\2\6\1\117\26\6\23\0\3\6"+
    "\1\120\25\6\36\0\1\121\101\0\1\122\12\0\12\6"+
    "\1\123\16\6\23\0\4\6\1\124\24\6\23\0\14\6"+
    "\1\125\14\6\23\0\12\6\1\66\16\6\23\0\2\6"+
    "\1\126\26\6\27\0\1\127\101\0\1\130\21\0\5\6"+
    "\1\43\23\6\23\0\7\6\1\66\21\6\23\0\16\6"+
    "\1\131\12\6\23\0\20\6\1\41\10\6\30\0\1\132"+
    "\107\0\1\133\12\0\20\6\1\64\10\6\25\0\1\134"+
    "\106\0\1\135\54\0\1\136\55\0\1\137\54\0\1\140"+
    "\44\0\1\33\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3916];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\22\1\1\11\2\1\1\0\1\11"+
    "\2\0\22\1\2\0\1\11\15\1\1\0\1\11\10\1"+
    "\2\0\5\1\2\0\4\1\2\0\1\1\2\0\1\11"+
    "\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* Constantes con los nombres imprimibles de los distintos tokens */
    private static String COMMENT_LABEL = "COMENTARIO";
    private static String STRING_LABEL = "CADENA";
    private static String RESERVED_LABEL = "PALABRA RESERVADA";
    private static String IDENTIFIER_LABEL = "IDENTIFICADOR";
    private static String DELIMITER_LABEL = "DELIMITADOR";
    private static String OPERATOR_LABEL = "OPERADOR";
    private static String CONSTANT_LABEL = "CONSTANTE";
    
    /* tokenExists indica si existen tokens pendientes de analizar.
       Usado en el main para controlar la condición de salida del bucle de lectura
    */
    private boolean _tokenExists = false;

    public boolean tokenExists(){
        return this._tokenExists;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
      /* Código a ejecutar en el constructor de la clase */
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 394) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        /* Código a ejecutar al finalizar el análisis.
       Cambiamos tokenExists a false para que se detenga el bucle de lectura
    */
    this._tokenExists = false;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public CustomToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { CustomToken t = new CustomToken(yytext(), CONSTANT_LABEL);
 this._tokenExists = true;
 return t;
            }
          case 9: break;
          case 2: 
            { CustomToken t = new CustomToken(yytext(), DELIMITER_LABEL);
 this._tokenExists = true;
 return t;
            }
          case 10: break;
          case 3: 
            { 
            }
          case 11: break;
          case 4: 
            { CustomToken t = new CustomToken(yytext(), IDENTIFIER_LABEL);
 this._tokenExists = true;
 return t;
            }
          case 12: break;
          case 5: 
            { CustomToken t = new CustomToken(yytext(), OPERATOR_LABEL);
 this._tokenExists = true;
 return t;
            }
          case 13: break;
          case 6: 
            { CustomToken t = new CustomToken(yytext(), RESERVED_LABEL);
 this._tokenExists = true;
 return t;
            }
          case 14: break;
          case 7: 
            { CustomToken t = new CustomToken(yytext(), STRING_LABEL);
 this._tokenExists = true;
 return t;
            }
          case 15: break;
          case 8: 
            { CustomToken t = new CustomToken(yytext(), COMMENT_LABEL);
 this._tokenExists = true;
 return t;
            }
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
